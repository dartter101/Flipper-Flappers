# -*- coding: utf-8 -*-
"""301Projectversionz.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1l85AEJSuupMJhqmNdX5zIeQ8aFhcad5e

#Basic Start

mount drive
"""

from google.colab import drive
drive.mount('/content/drive')

"""Get dir link<br>
main directory: <br>
---dolphins<br>
-----test<br>
-------training_images.jpeg<br>
-----train<br>
-------testing_images.jpeg<br>
---train.csv<br>
This should be the layout of the directory you are pointed to


"""

import os
#this should be path to folder in which the train.csv is sotred
path = '/content/drive/MyDrive/Colab Notebooks/test'
os.chdir(path)
print(os.listdir(path))

"""get GPU if availible"""

gpu_info = !nvidia-smi
gpu_info = '\n'.join(gpu_info)
if gpu_info.find('failed') >= 0:
  print('Not connected to a GPU')
else:
  print(gpu_info)

"""#Organize images to be used 
(Only needs to be rerun when you decide to use new dolphins or species)

Get dir link<br>
main directory: <br>
---dolphins<br>
-----test<br>
-------training_images.jpeg<br>
-----train<br>
-------testing_images.jpeg<br>
---dolphinz<br>
---dolphinzz<br>
---train.csv<br>

if you are rerunning this to get new dolphins to test with delte the dolphinz AND dolphinzz folders
"""

# get dictionary of every dolphin id
import csv
hold = []
with open('train.csv', newline='') as csvfile:
  spamreader = csv.reader(csvfile, delimiter=' ', quotechar='|')
  for row in spamreader:
    hold.append(row)
print(hold[0])
arr = hold[1:] # removes the first row from array which says whats what see output
dolphins = []
dImage= []
dSpecies= []
dID= []
res = {}
for elements in arr:
    element = elements[0].split(',')
    dImage.append(element[0])
    dSpecies.append(element[1])
    dID.append(element[2])
dolphins.append(dImage)
dolphins.append(dSpecies)
dolphins.append(dID)

"""##BY SPECIES

Get key value for spoecies and count
"""

species = dolphins[1]
specs = {}
for type in species:
  specs[type] = species.count(type)
print(specs)

"""get 2 most common species"""

from collections import Counter
k = Counter(specs)
#get the 2 greatest specis counts
high = k.most_common(2)
#Display the two species and their counts
for i in high:
    print(i[0]," :",i[1]," ")
print(high)

"""Create directories for them

"""

#os.makedirs('dolphinz')
keys = []
for key in high:
  keys.append(key[0])
for key in keys:
  os.makedirs('dolphinz/train/'+key)

"""Fill species directories with corresponding images"""

import shutil
from pathlib import Path
source = 'dolphin/train'
dest= 'dolphinz/train'
for elements in arr:
  element = elements[0].split(',')
  if element[1] in keys:
    src = os.path.join(source, element[0])
    dst = os.path.join(dest, element[1],element[0])
    shutil.copyfile(src, dst)

"""train to test images should be ~ 80% to 20%

###Test Folders for species

Setting up test folders for species
"""

train_folders = os.listdir('dolphinz/train')

#### move  ~ 10% of the images tot eh test folders from the train folders
for id in train_folders:
  #Create folder in train
  os.makedirs('dolphinz/test/'+id)
print( os.listdir('dolphinz/test'))

"""Moving ~20% of the photos from train to test"""

import math

for id in train_folders:
  imagez = os.listdir('dolphinz/train/'+id)
  amount = math.floor(len(imagez)*.2)
  transfer = imagez[:amount]
  for item in transfer:
    src = os.path.join('dolphinz/train/'+id, item)
    dst = os.path.join('dolphinz/test/'+id, item)
    shutil.move(src, dst)

"""##BY Dolphin ID

Get key value for dolphin and count
"""

ids1 = []
for x in range(len(dolphins[2])):
  if dolphins[1][x] in keys[0]:
    ids1.append(dolphins[2][x])
print(ids1)
ids2 = []
for x in range(len(dolphins[2])):
  if dolphins[1][x] in keys[1]:
    ids2.append(dolphins[2][x])
print(ids2)

"""get 2 most common dolphins per species"""

from collections import Counter
k = Counter(ids1)
#get the 2 greatest specis counts
high1 = k.most_common(2)
#Display the two species and their counts
for i in high1:
    print(i[0]," :",i[1]," ")
print(high1)
k = Counter(ids2)
#get the 2 greatest specis counts
high2 = k.most_common(2)
#Display the two species and their counts
for i in high2:
    print(i[0]," :",i[1]," ")
print(high2)

"""Create directories for them

"""

os.listdir()

os.makedirs('dolphinzz')
for key in keys:
  #print('dolphinzz/'+key)
  #print('dolphinzz/'+key+"/train")
  os.makedirs('dolphinzz/'+key)
  os.makedirs('dolphinzz/'+key+"/train")
hold = []
for key in high1:
  hold.append(key[0])
for key in hold:
  #print('dolphinzz/'+keys[0]+'/train/'+key)
  os.makedirs('dolphinzz/'+keys[0]+'/train/'+key)

print(os.listdir('dolphinzz'))

hold = []
for key in high2:
  hold.append(key[0])
for key in hold:
  #print('dolphinzz/'+keys[1]+'/train/'+key)
  os.makedirs('dolphinzz/'+keys[1]+'/train/'+key)

"""Fill species directories with corresponding images"""

import shutil
from pathlib import Path
source = 'dolphin/train'
dest= 'dolphinzz/'+keys[0]+'/train'
check1 = []
check2 = []
for i in range(len(high1)):
  check1.append(high1[i][0])
for i in range(len(high2)):
  check2.append(high2[i][0])
print(high1)
print(check1)
print(high2)
print(check2)

for x in range(len(dolphins[0])):
  image_name = dolphins[0][x]
  id = dolphins[2][x]
  if id in check1:
    src = os.path.join(source, image_name)
    dst = os.path.join(dest,id,image_name)
    shutil.copyfile(src, dst)

source = 'dolphin/train'
dest= 'dolphinzz/'+keys[1]+'/train'
for x in range(len(dolphins[0])):
  image_name = dolphins[0][x]
  id = dolphins[2][x]
  if id in check2:
    src = os.path.join(source, image_name)
    dst = os.path.join(dest,id,image_name)
    shutil.copyfile(src, dst)

"""###Test Folders for dolphins
(train to test images should be ~ 80% to 20%)

Setting up test folders for species
"""

path1 = 'dolphinzz/beluga'
path2 = 'dolphinzz/bottlenose_dolphin'

train_folders = os.listdir(path1+'/train')

#### move  ~ 10% of the images tot eh test folders from the train folders
for id in train_folders:
  #Create folder in train
  os.makedirs(path1+'/test/'+id)

train_folders = os.listdir(path2+'/train')

#### move  ~ 10% of the images tot eh test folders from the train folders
for id in train_folders:
  #Create folder in train
  os.makedirs(path2+'/test/'+id)

print( os.listdir(path2+'/test'))

"""Moving ~20% of the photos from train to test"""

import math
train_folders = os.listdir(path1+'/train')
for id in train_folders:
  imagez = os.listdir(path1+'/train/'+id)
  amount = math.floor(len(imagez)*.2)
  transfer = imagez[:amount]
  for item in transfer:
    src = os.path.join(path1+'/train/'+id, item)
    dst = os.path.join(path1+'/test/'+id, item)
    shutil.move(src, dst)

train_folders = os.listdir(path2+'/train')
for id in train_folders:
  imagez = os.listdir(path2+'/train/'+id)
  amount = math.floor(len(imagez)*.2)
  transfer = imagez[:amount]
  for item in transfer:
    src = os.path.join(path2+'/train/'+id, item)
    dst = os.path.join(path2+'/test/'+id, item)
    shutil.move(src, dst)

"""#Create Models

##Species Model
"""

# Importing all necessary libraries
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D
from keras.layers import Activation, Dropout, Flatten, Dense
from keras import backend as K
 
img_width, img_height = 224, 224

train_data_dir = 'dolphinz/train'
validation_data_dir = 'dolphinz/test'
nb_train_samples =400
nb_validation_samples = 100
epochs = 100
batch_size = 16

if K.image_data_format() == 'channels_first':
    input_shape = (3, img_width, img_height)
else:
    input_shape = (img_width, img_height, 3)

model = Sequential()
model.add(Conv2D(32, (2, 2), input_shape=input_shape))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
 
model.add(Conv2D(32, (2, 2)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
 
model.add(Conv2D(64, (2, 2)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
 
model.add(Flatten())
model.add(Dense(64))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(1))
model.add(Activation('sigmoid'))

model.compile(loss='binary_crossentropy',
              optimizer='rmsprop',
              metrics=['accuracy'])

train_datagen = ImageDataGenerator(
    rescale=1. / 255,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True)
 
test_datagen = ImageDataGenerator(rescale=1. / 255)
 
train_generator = train_datagen.flow_from_directory(
    train_data_dir,
    target_size=(img_width, img_height),
    batch_size=batch_size,
    class_mode='binary')
 
validation_generator = test_datagen.flow_from_directory(
    validation_data_dir,
    target_size=(img_width, img_height),
    batch_size=batch_size,
    class_mode='binary')
 
history = model.fit_generator(
    train_generator,
    steps_per_epoch=nb_train_samples // batch_size,
    epochs=epochs,
    validation_data=validation_generator,
    validation_steps=nb_validation_samples // batch_size)

model.save('species_model.h5')

import matplotlib.pyplot as plt

acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
loss = history.history['loss']
val_loss = history.history['val_loss']

epochs = range(len(acc))

plt.plot(epochs, acc, 'bo', label='Training acc')
plt.plot(epochs, val_acc, 'b', label='Validation acc')
plt.title('Training and validation accuracy')
plt.legend()

plt.figure()

plt.plot(epochs, loss, 'bo', label='Training loss')
plt.plot(epochs, val_loss, 'b', label='Validation loss')
plt.title('Training and validation loss')
plt.legend()

plt.show()

"""##Individual Model

###bottlenose
"""

# Importing all necessary libraries
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D
from keras.layers import Activation, Dropout, Flatten, Dense
from keras import backend as K
 
img_width, img_height = 224, 224

train_data_dir = 'dolphinzz/bottlenose_dolphin/train'
validation_data_dir = 'dolphinzz/bottlenose_dolphin/test'
nb_train_samples =100
nb_validation_samples = 10
epochs = 10
batch_size = 16

if K.image_data_format() == 'channels_first':
    input_shape = (3, img_width, img_height)
else:
    input_shape = (img_width, img_height, 3)

model = Sequential()
model.add(Conv2D(32, (2, 2), input_shape=input_shape))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
 
model.add(Conv2D(32, (2, 2)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
 
model.add(Conv2D(64, (2, 2)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
 
model.add(Flatten())
model.add(Dense(64))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(1))
model.add(Activation('sigmoid'))

model.compile(loss='binary_crossentropy',
              optimizer='rmsprop',
              metrics=['accuracy'])

train_datagen = ImageDataGenerator(
    rescale=1. / 255,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True)
 
test_datagen = ImageDataGenerator(rescale=1. / 255)
 
train_generator = train_datagen.flow_from_directory(
    train_data_dir,
    target_size=(img_width, img_height),
    batch_size=batch_size,
    class_mode='binary')
 
validation_generator = test_datagen.flow_from_directory(
    validation_data_dir,
    target_size=(img_width, img_height),
    batch_size=batch_size,
    class_mode='binary')
 
history = model.fit_generator(
    train_generator,
    steps_per_epoch=nb_train_samples // batch_size,
    epochs=epochs,
    validation_data=validation_generator,
    validation_steps=nb_validation_samples // batch_size)

model.save('bottle_model.h5')

"""###beluga"""

# Importing all necessary libraries
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D
from keras.layers import Activation, Dropout, Flatten, Dense
from keras import backend as K
 
img_width, img_height = 224, 224

train_data_dir = 'dolphinzz/beluga/train'
validation_data_dir = 'dolphinzz/beluga/test'
nb_train_samples =100
nb_validation_samples = 10
epochs = 10
batch_size = 16

if K.image_data_format() == 'channels_first':
    input_shape = (3, img_width, img_height)
else:
    input_shape = (img_width, img_height, 3)

model = Sequential()
model.add(Conv2D(32, (2, 2), input_shape=input_shape))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
 
model.add(Conv2D(32, (2, 2)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
 
model.add(Conv2D(64, (2, 2)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
 
model.add(Flatten())
model.add(Dense(64))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(1))
model.add(Activation('sigmoid'))

model.compile(loss='binary_crossentropy',
              optimizer='rmsprop',
              metrics=['accuracy'])

train_datagen = ImageDataGenerator(
    rescale=1. / 255,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True)
 
test_datagen = ImageDataGenerator(rescale=1. / 255)
 
train_generator = train_datagen.flow_from_directory(
    train_data_dir,
    target_size=(img_width, img_height),
    batch_size=batch_size,
    class_mode='binary')
 
validation_generator = test_datagen.flow_from_directory(
    validation_data_dir,
    target_size=(img_width, img_height),
    batch_size=batch_size,
    class_mode='binary')
 
history = model.fit_generator(
    train_generator,
    steps_per_epoch=nb_train_samples // batch_size,
    epochs=epochs,
    validation_data=validation_generator,
    validation_steps=nb_validation_samples // batch_size)

model.save('beluga_model.h5')

"""#OUTPUT

##numpytest
"""

from keras.models import load_model
from keras.preprocessing.image import load_img
from keras.preprocessing.image import img_to_array
from keras.applications.vgg16 import preprocess_input
from keras.applications.vgg16 import decode_predictions
from keras.applications.vgg16 import VGG16
import numpy as np
from keras.models import load_model
 
model_species = load_model('species_model.h5')
model_bottle = load_model('bottle_model.h5')
model_beluga = load_model('beluga_model.h5')
 
image = load_img('dolphinz/train/beluga/3258bb1ce1c594.jpg', target_size=(224, 224))
#image = load_img('dolphinz/train/bottlenose_dolphin/329f5c10b75608.jpg', target_size=(224, 224))
img = np.array(image)
img = img / 255.0
img = img.reshape(1,224,224,3)
label1 = (model_species.predict(img) > 0.5).astype("int32")
if label1[0][0] == 1: #bottlenose
  label2 = (model_bottle .predict(img) > 0.45).astype("int32")
  if label2 ==1:
    print('known bottlenose')
  else:
    print('unknown bottlenose')
else:
  #beluga
  label2 = (model_beluga.predict(img) > 0.43).astype("int32")
  if label2 ==1:
    print('known beluga')
  else:
    print('unknown beluga')

"""##out"""

from jax._src.numpy.lax_numpy import asarray
from jax.numpy import int32
from keras.models import load_model
from keras.preprocessing.image import load_img
from keras.preprocessing.image import img_to_array
from keras.applications.vgg16 import preprocess_input
from keras.applications.vgg16 import decode_predictions
from keras.applications.vgg16 import VGG16
from jax import random
from jax._src import device_array
from jax._src import dtypes
from jax._src.api_util import _ensure_index_tuple
from jax._src.lax.lax import (_array_copy, _sort_lt_comparator,
                              _sort_le_comparator)
from jax import grad, jit, vmap
import jax.numpy as jnp
import cv2
import jax.numpy as jnp
from keras.models import load_model
from jax.scipy.special import logsumexp


model_species = load_model('species_model.h5')
model_bottle = load_model('bottle_model.h5')
model_beluga = load_model('beluga_model.h5')
model_species.compile(loss='binary_crossentropy',
              optimizer='rmsprop',
              metrics=['accuracy'])
model_bottle.compile(loss='binary_crossentropy',
              optimizer='rmsprop',
              metrics=['accuracy'])
model_beluga.compile(loss='binary_crossentropy',
              optimizer='rmsprop',
              metrics=['accuracy'])
img=cv2.imread('dolphinz/train/beluga/3258bb1ce1c594.jpg')

image_= random.PRNGKey(0)
batch_size=256
epochs=8
learning_rate = jnp.array(1/1e3)

img = cv2.resize(img,(224,224))
img = img / 255.0
img = img.reshape(1,224,224,3)
label = (model_species.predict(img) > 0.50).astype("int32")
if label1[0][0] == 1: #bottlenose
  label2 = (model_bottle .predict(img) > 0.45).astype("int32")
  if label2 ==1:
    print('known bottlenose')
  else:
    print('unknown bottlenose')
else: #beluga
  label2 = (model_beluga.predict(img) > 0.43).astype("int32")
  if label2 ==1:
    print('known beluga')
  else:
    print('unknown beluga')